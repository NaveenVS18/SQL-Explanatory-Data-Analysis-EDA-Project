/*
===============================================================================
Product Report
===============================================================================
Purpose:
    - This report consolidates key product metrics and behaviors.

Highlights:
    1. Gathers essential fields such as product name, category, subcategory, and cost.
    2. Segments products by revenue to identify High-Performers, Mid-Range, or Low-Performers.
    3. Aggregates product-level metrics:
       - total orders
       - total sales
       - total quantity sold
       - total customers (unique)
       - lifespan (in months)
    4. Calculates valuable KPIs:
       - recency (months since last sale)
       - average order revenue (AOR)
       - average monthly revenue
===============================================================================
*/
create view gold.reports_product as 
with base_query as 
(select s.order_number,s.order_date,s.customer_key,s.sales_amount,s.quantity,p.product_key,p.product_name,p.category,p.subcategory,p.cost from gold.fact_sales s left join gold.dim_products p on s.product_key = p.product_key 
where order_date is not null),
product_aggregation as 
(select count(distinct order_number) Total_orders,sum(sales_amount) total_amount,sum(quantity) as total_quantity,count(distinct customer_key) total_customers, datediff(month,min(order_date),max(order_date)) as lifespan, 
cost,product_name,product_key,category,subcategory,MAX(order_date) AS last_sale_date,ROUND(AVG(CAST(sales_amount AS FLOAT) / NULLIF(quantity, 0)),1) AS avg_selling_price
from base_query group by cost,product_name,product_key,category,subcategory)
select product_key,product_name,category,subcategory,cost,last_sale_date,avg_selling_price,
case when total_amount > 5000 then 'High-Performer'
     when total_amount <5000 then 'Low-Performer'
	 else 'Mid_range'
	 end as Product_segment,
	 lifespan,total_orders,total_amount,total_quantity,total_customers,
	 case when lifespan = 0 then 0
	      else total_amount/lifespan end as average_monthly_revenue,
	case when total_orders = 0 THEN 0
		ELSE total_amount / total_orders
	END AS avg_order_revenue
from product_aggregation;
